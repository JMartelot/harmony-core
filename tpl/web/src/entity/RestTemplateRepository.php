<#assign curr = entities[current_entity] />
<?php

namespace Demact\ApiBundle\Entity;

use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Rest${curr.name?cap_first}Repository extends FOSRestController{
<#list curr.fields as field>
	<#if !field.internal>
	const ${field.name?upper_case} = "${field.name?lower_case}";
	</#if>
</#list>

	/** 
	* GET /${curr.name?uncap_first}/{id} 
	*  
	* @param string $userId 
	* @return Response 
	*
	* @Rest\Get("/${curr.name?uncap_first}/{id}")
	*/  
	public function get${curr.name?cap_first}Action($id){  
		$em = $this->getDoctrine()->getManager();
		$data = $em->getRepository('${project_name?cap_first}ApiBundle:${curr.name?cap_first}')->find($id);
		$view = $this->view(array("${curr.name?cap_first}" => self::toJson($data)), 200);
		return $this->handleView($view);
	}	

	/** 
	* PUT /${curr.name?uncap_first} 
	*
	* @Rest\Put("/${curr.name?uncap_first}")
	*/  
	public function create${curr.name?cap_first}Action(){  
		$${curr.name?uncap_first} = new ${curr.name?cap_first}();
		$this->extract($${curr.name?uncap_first}, json_decode($this->getRequest()->getContent(), true)['${curr.name?cap_first}']);
		$em = $this->getDoctrine()->getManager();
		$em->persist($${curr.name?uncap_first});
		$em->flush();
		$view = $this->view(array("Ok" => self::toJson($${curr.name?uncap_first})), 200);
		return $this->handleView($view);
	}	


	/** 
	* GET /${curr.name?uncap_first} 
	*
	* @Rest\Get("/${curr.name?uncap_first}")
	*/  
	public function getAll${curr.name?cap_first}Action(){  
		$em = $this->getDoctrine()->getManager();
		$data = $em->getRepository('${project_name?cap_first}ApiBundle:${curr.name?cap_first}')->findAll();
		$view = $this->view(array("${curr.name?cap_first}s" => self::arrayToJson($data)), 200);
		return $this->handleView($view);
	}	

	/** 
	* POST /${curr.name?uncap_first}/{id} 
	*
	* @Rest\Post("/${curr.name?uncap_first}/{id}")
	*/  
	public function update${curr.name?cap_first}Action($id){  
		$em = $this->getDoctrine()->getManager();
		$${curr.name?uncap_first} = $em->getRepository('${project_name?cap_first}ApiBundle:${curr.name?cap_first}')->find($id);
		$this->extract($${curr.name?uncap_first}, json_decode($this->getRequest()->getContent(), true)['${curr.name?cap_first}']);
		$em->persist($${curr.name?uncap_first});
		$em->flush();
		$view = $this->view(array("Ok" => self::toJson($${curr.name?uncap_first})), 200);
		return $this->handleView($view);
	}	


	/** 
	* DELETE /${curr.name?uncap_first}/{id} 
	*
	* @Rest\Delete("/${curr.name?uncap_first}/{id}")
	*/  
	public function delete${curr.name?cap_first}Action($id){  
		$em = $this->getDoctrine()->getManager();
		$entity = $em->getRepository('${project_name?cap_first}ApiBundle:${curr.name?cap_first}')->find($id);

		if (!$entity) {
			throw $this->createNotFoundException('Unable to find ${curr.name?cap_first} entity.');
		}

		$em->remove($entity);
		$em->flush();

		$view = $this->view($entity, 200);
		return $this->handleView($view);

	}	

	/**
	 * Convert a ${curr.name?uncap_first} to a JSon
	 *
	 */
	public static function toJson($${curr.name?uncap_first}){
		if($${curr.name?uncap_first}!=null){
			$json = array();
<#list curr.fields as field>
	<#if !field.internal>
		<#if !field.relation??>
			$json[self::${field.name?upper_case}] = $${curr.name?uncap_first}->get${field.name?cap_first}();
		<#else>
			<#if field.relation.type=="OneToOne" || field.relation.type=="ManyToOne">
			$json[self::${field.name?upper_case}] = Rest${field.relation.targetEntity?cap_first}Repository::toJson($${curr.name?uncap_first}->get${field.name?cap_first}());
			<#else>
			$json[self::${field.name?upper_case}] = Rest${field.relation.targetEntity?cap_first}Repository::arrayToJson($${curr.name?uncap_first}->get${field.name?cap_first}());
			</#if>
		</#if>
	</#if>
</#list>
			return $json;
		}else{
			return null;
		}
	}


	/**
	 * Convert an array of ${curr.name?uncap_first}s to a JSon
	 *
	 */
	public static function arrayToJson($${curr.name?uncap_first}s){
		$json = array();
		foreach($${curr.name?uncap_first}s as $${curr.name?uncap_first}){
			$json[] = self::toJson($${curr.name?uncap_first});
		}
		return $json;
	}


	/**
	 * Convert a JSon to a ${curr.name?uncap_first}
	 *
	 */
	public function extract($${curr.name?uncap_first}, $json){
<#list curr.fields as field>
	<#if !field.internal && !field.id>
		if(array_key_exists(self::${field.name?upper_case},$json)){
		<#if !field.relation??>
			<#if field.type=="date" || field.type=="time" || field.type=="datetime">
			$${curr.name?uncap_first}->set${field.name?cap_first}(new \DateTime($json[self::${field.name?upper_case}]));
			<#else>
			$${curr.name?uncap_first}->set${field.name?cap_first}($json[self::${field.name?upper_case}]);
			</#if>
		<#else>
			<#if field.relation.type=="OneToOne" || field.relation.type=="ManyToOne">
			$em = $this->getDoctrine()->getManager();
			$${field.name?uncap_first} = $em->getRepository('${project_name?cap_first}ApiBundle:${field.relation.targetEntity?cap_first}')->find($json[self::${field.name?upper_case}]['id']);
			$${curr.name?uncap_first}->set${field.name?cap_first}($${field.name?uncap_first});
			<#else>

			</#if>
		</#if>
		}
	</#if>
</#list>
	}
}
