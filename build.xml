<?xml version="1.0" encoding="UTF-8"?>
<project name="harmony" default="buildall">
	<description>
		Harmony project build file.
	</description>
	    
	<!-- load environment variables as properties -->
	<property environment="env" />

	<!-- load properties files -->
	<property file="build.properties" />
	<property file="../build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- default folder location properties -->
	<property name="src.rel-dir" value="src" />
	<property name="tests.src.rel-dir" value="src/com/tactfactory/mda/test" />
	<property name="tests.build.rel-dir" value="bin/com/tactfactory/mda/test" />
	<!-- <property name="etc.rel-dir" value="etc" /-->
	<property name="app.rel-dir" value="app" />
	<property name="build.rel-dir" value="bin" />
	<property name="lib.rel-dir" value="lib" />
	<property name="ant-lib.rel-dir" value="${lib.rel-dir}/ant" />
	<property name="tmp.rel-dir" value="tmp" />
	<property name="dist.rel-dir" value="vendor/tact-core" />
	<property name="sherlock.rel-dir" value="sherlock-4.2" />
	<property name="doc.rel-dir" value="${dist.rel-dir}/javadoc" />
	<property name="jar.rel-file" value="${dist.rel-dir}/${ant.project.name}.jar" />
		
	<!-- jar file from where the tasks are loaded -->
    <path id="android.antlibs">
        <pathelement path="${ant-lib.rel-dir}/anttasks.jar" />
    </path>

    <!-- Custom tasks -->
    <taskdef resource="anttasks.properties" classpathref="android.antlibs" />
    
	<!-- project classpath -->

	<path id="project.classpath">
		<!-- compiled classes -->
		<pathelement location="${build.rel-dir}" />
		<!-- libraries -->
		<fileset dir="${lib.rel-dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath>
			<pathelement location="${FINDBUGS_HOME}" />
		</classpath>
	</taskdef>
	
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath>
			<pathelement location="${PMD_HOME}/lib/pmd-*.jar" />
		</classpath>
	</taskdef>
	
	<!-- basic -->

    <target name="init">
        <mkdir dir="${build.rel-dir}"/>
        <mkdir dir="${dist.rel-dir}"/>
        <mkdir dir="${dist.rel-dir}/${lib.rel-dir}"/>
        <mkdir dir="${app.rel-dir}"/>
    	<mkdir dir="${tmp.rel-dir}"/>
    </target>

    <target name="clean"
        description="Delete temporary folders">
        <delete dir="${build.rel-dir}" failonerror="false" deleteonexit="true" />
        <delete dir="${dist.rel-dir}" failonerror="false" deleteonexit="true" />
    	<delete dir="${tmp.rel-dir}" failonerror="false" deleteonexit="true" />
    </target>
    
    <!-- javadoc -->

    <target name="javadoc" depends="init"
        description="Generate Java classes documentation" >
        <echo message="Generating javadocs to directory ${doc.rel-dir}" />
        <delete dir="${doc.rel-dir}" />
        <javadoc destdir="${doc.rel-dir}" sourcepath="" 
        	excludepackagenames="com.tactfactory.mda.test" 
        	defaultexcludes="yes">
            <fileset dir="${src.rel-dir}" includes="**/*.java"/>
            <classpath refid="project.classpath" />
        </javadoc>
    </target>
    
    
    <!-- compile -->

    <target name="prepare-resources" depends="init">
    <!-- description="Prepare application resource files" -->
        <copy todir="${build.rel-dir}" overwrite="true">
            <fileset dir="${src.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" />
        </copy>
        <replace dir="${build.rel-dir}" includes="**/*.properties,**/*.xml" excludes="" summary="true">
            <replacefilter token="@example-token@" value="${example-property}" />
        </replace>
    </target>

    <property name="compile.debug" value="true" />
    <property name="compile.debuglevel" value="lines,vars,source" />

    <target name="compile" depends="init,prepare-resources">
    <!-- description="Compile source code" excludes="**/com/tactfactory/mda/test/**" -->
        <javac
            srcdir="${src.rel-dir}"
            destdir="${build.rel-dir}"
            debug="${compile.debug}"
            debuglevel="${compile.debuglevel}"
            includeantruntime="false"
        	excludes="**/com/tactfactory/mda/test/**"
        	target="1.6"
        	source="1.6"
        	
        	bootclasspath="jdk1.6.0/lib/rt.jar" >
            <compilerarg line="" /> <!-- "-Xlint:all", "-Xlint:all,-path", "-Xlint:all,-path,-unchecked" -->
            <classpath refid="project.classpath" />
        </javac>
    </target>
    
    <!-- tests -->

    <target name="compile-tests" depends="init,prepare-resources"
    	description="Compile tests" >
    	<javac
            srcdir="${src.rel-dir}"
            destdir="${build.rel-dir}"
            debug="${compile.debug}"
            debuglevel="${compile.debuglevel}"
            includeantruntime="false"
            target="1.6"
        	source="1.6" >
            <compilerarg line="" /> <!-- "-Xlint:all", "-Xlint:all,-path", "-Xlint:all,-path,-unchecked" -->
            <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="run-tests" depends="compile-tests"
        description="Run tests">

        <if condition="${emma.enabled}">
            <then>
		    	<emma enabled="${emma.enabled}" >
				    <instr instrpathref="emma.coverage.classes"
				         destdir="${emma.instr-dir}"
				         metadatafile="${emma.out-dir}/metadata.emma"
				         merge="true">
				        <filter value="${emma.filter}" />
				    </instr>
				</emma>
				
		    	<path id="emma.test.classpath">
					<pathelement location="${emma.instr-dir}"/>
					<pathelement location="${emma.dir}"/>
					<fileset dir="${emma.dir}">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${lib.rel-dir}">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${dist.rel-dir}">
						<include name="*.jar" />
					</fileset>
				</path>
				
		    	<property name="test.classpath.id" value="emma.test.classpath" />
			</then>
			<else>
			    <property name="test.classpath.id" value="project.classpath" />
			</else>
		</if>

        <junit haltonfailure="no" fork="yes">
            <!-- <if condition="${emma.enabled}">
	            <then> -->
		            <jvmarg value="-Demma.coverage.out.file=${emma.out-dir}/coverage.emma" />
					<jvmarg value="-Demma.coverage.out.merge=false" />
					<!-- <jvmarg value="-XX:-UseSplitVerifier" /> -->
           		<!-- </then>
      		</if>	 -->		
      		
            <classpath refid="${test.classpath.id}" />
            <formatter type="xml" />
        	<test name="com.tactfactory.mda.test.AllTests" todir="${tmp.rel-dir}/"/>
        </junit>
        
        <if condition="${emma.enabled}">
            <then>
		        <emma enabled="${emma.enabled}" >
				    <report sourcepath="src">
					    <!-- collect all EMMA data dumps (metadata and runtime)
					         [this can be done via nested <fileset> fileset elements
					         or <file> elements pointing to a single file]:
					    -->
					    <fileset dir="${emma.out-dir}" >
					        <include name="*.emma" />
					    </fileset>
					    
					    <!-- for every type of report desired, configure a nested
					         element; various report parameters
					         can be inherited from the parent <report>
					         and individually overridden for each report type:
					    -->
					    <xml outfile="${emma.out-dir}/coverage.xml"/>
				    </report>
				</emma>
			</then>
		</if>
    </target>
	
	<target name="run-findbugs" depends="jar"
		description="Run findbugs">
	    <findbugs home="${env.FINDBUGS_HOME}"
	              output="xml"
	              outputFile="findbugs.xml" >
	      <auxClasspath path="${env.FINDBUGS_HOME}/lib/Regex.jar" />
	      <sourcePath path="${src.rel-dir}" />
	      <class location="${env.FINDBUGS_HOME}/bin/bcel.jar" />
	    </findbugs>
	  </target>
	
	<target name="run-pmd" depends="run-findbugs"
		description="Run pmd">
		<pmd shortFilenames="true">
			<ruleset></ruleset>
			<formatter type="html" toFile="pmd_report.html" linkPrefix="http://pmd.sourceforge.net/xref/"/>
			<formatter type="xml" toFile="pmd.xml"/>
			<fileset dir="${src.rel-dir}">
				<include name="**/*.java"/>
				<exclude name="**/*Test*"/>
			</fileset>
		</pmd>
	</target>
	
	<target name="run-jdepend" depends="compile-tests"
		description="Run jdepend">
		<jdepend outputfile="docs/jdepend.xml" fork="yes" format="xml">
		    <sourcespath>
		        <pathelement location="${src.rel-dir}"/>
		    </sourcespath>
		    <classpath refid="project.classpath" />
		        <!--pathelement location="classes"/>
		        <pathelement location="/usr/share/java/jdepend-2.9.jar"/>
		    </classpath-->
		</jdepend>
	</target>
	
	<!-- build -->

	<target name="post_build" depends="compile"
        description="Build the project">
		<!-- build a temporary lib dir, and flatten out the jars into one folder -->
		<copy todir="${dist.rel-dir}/${lib.rel-dir}" flatten="true">
		  <fileset dir="${lib.rel-dir}">
		    <include name="*.jar"/>
		  </fileset>
		</copy>
		<copy todir="${dist.rel-dir}/${lib.rel-dir}/${sherlock.rel-dir}">
		  <fileset dir="${lib.rel-dir}/${sherlock.rel-dir}"/>
		</copy>
        <delete dir="${build.rel-dir}" failonerror="false" deleteonexit="true" />
    </target>

    <target name="build" depends="compile"
        description="Build the project">
    </target>

    <target name="rebuild" depends="clean,build"
		description="Rebuild the project">
    </target>
    
    <target name="buildall" depends="rebuild,jar,post_build"
        description="Build the project">
    </target>
    
    <!-- library -->

    <target name="jar" depends="compile">
    <!-- description="Create a jar file" -->
    	<pathconvert property="libs.project" pathsep=" ">
		    <mapper>
		      <chainedmapper>
		 
		        <!-- remove absolute path -->
		        <flattenmapper />
		 
		        <!-- add lib/ prefix -->
		        <globmapper from="*" to="../../lib/*" />
		      </chainedmapper>
		    </mapper>
		 
		    <path>
		 
		      <!-- lib.home contains all jar files, in several subdirectories -->
		      <fileset dir="${lib.rel-dir}">
		        <include name="**/*.jar" />
		      </fileset>
		    </path>
		  </pathconvert>
        <jar destfile="${jar.rel-file}" compress="true" filesetmanifest="merge">
            <zipfileset dir="${build.rel-dir}"
                        includes=""
                        excludes="" />
            <!-- zipfileset dir="${lib.rel-dir}"
            			prefix="${lib.rel-dir}"
                        includes=""
                        excludes="" />
            <zipfileset dir="tpl"
            			prefix="tpl"
                        includes=""
                        excludes="" /-->
            <manifest>
	            <attribute name="Main-Class" value="com.tactfactory.mda.Console"/>
	            <attribute name="Class-Path" value="${libs.project}"/>
            </manifest>
            
        </jar>
    </target>
    
    <!-- emma -->   
	<property name="emma.dir" value="${lib.rel-dir}/emma" />
	<property name="emma.out-dir" value="${tmp.rel-dir}/coverage" />
	<property name="emma.instr-dir" value="${tmp.rel-dir}/emmainstr" />
	
	<path id="emma.lib" >
	    <pathelement location="${emma.dir}/emma.jar" />
	    <pathelement location="${emma.dir}/emma_ant.jar" />
	</path>
	
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
	
	<path id="emma.coverage.classes" >
	    <pathelement location="${build.rel-dir}" />
	</path>
	
	<target name="emma"> <!-- enable code coverage -->
        <property name="emma.enabled" value="true" />
        <property name="emma.filter" value="" />
        <mkdir dir="${emma.instr-dir}" />        
    </target>
</project>
